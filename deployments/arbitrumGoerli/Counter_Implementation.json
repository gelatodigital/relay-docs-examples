{
  "address": "0x662b36Ee1272C0b222668737aa6Bb4Bc0C34b464",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_msgSender",
          "type": "address"
        }
      ],
      "name": "IncrementContextCounter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "IncrementCounter",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contextCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_msgSender",
          "type": "address"
        }
      ],
      "name": "currentContextCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementContext",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9bda82e300a3ee30103b92c95b54638ead1975a69de9e0005381c77b570b7f85",
  "receipt": {
    "to": null,
    "from": "0xa0B2F93e4ef04de51a91bcBc494c04E55F8ff6EB",
    "contractAddress": "0x662b36Ee1272C0b222668737aa6Bb4Bc0C34b464",
    "transactionIndex": 1,
    "gasUsed": "711572",
    "logsBloom": "0x
    "blockHash": "0xcb2d5ca10fa555131f5c26c762d5f07d618b5e756faab1a45086df94238d546b",
    "transactionHash": "0x9bda82e300a3ee30103b92c95b54638ead1975a69de9e0005381c77b570b7f85",
    "logs": [],
    "blockNumber": 229895,
    "cumulativeGasUsed": "711572",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaBcC9b596420A9E9172FD5938620E265a0f9Df92"
  ],
  "numDeployments": 1,
  "solcInputHash": "5ca605253c952b952e5676607766a0e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"}],\"name\":\"IncrementContextCounter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IncrementCounter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contextCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"}],\"name\":\"currentContextCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementContext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Counter.sol\":\"Counter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/relayer-context/contracts/RelayerContextERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {TokenUtils} from \\\"./lib/TokenUtils.sol\\\";\\n\\n// solhint-disable max-line-length\\n/**\\n * @dev Context variant with RelayerContextERC2771 and ERC2771Context support.\\n * Inherit plain RelayerContext instead, if you do not need ERC2771 support.\\n * Expects calldata encoding:\\n *   abi.encodePacked(\\n *     abi.encodePacked(\\n *        bytes fnArgs,\\n *        abi.encode(address feeCollector, address feeToken, uint256 fee)\\n *     ),\\n *     sender\\n *   )\\n * Therefore, we're expecting 3 * 32bytes and 20 bytes to be appended to fnArgs\\n * 32bytes start offsets from calldatasize:\\n *     feeCollector: - 3 * 32 + 20\\n *     feeToken: - 2 * 32 + 20\\n *     fee: - 32 + 20\\n *     sender: - 20\\n */\\n// solhint-enable max-line-length\\nabstract contract RelayerContextERC2771 {\\n    using TokenUtils for address;\\n\\n    /// @dev Only use with a safe whitelisted trusted forwarder contract (e.g. GelatoRelay)\\n    address public immutable relayer;\\n\\n    // RelayerContext\\n    uint256 private constant _FEE_COLLECTOR_START = 3 * 32 + 20;\\n    uint256 private constant _FEE_TOKEN_START = 2 * 32 + 20;\\n    uint256 private constant _FEE_START = 32 + 20;\\n\\n    // ERC2771Context\\n    uint256 private constant _SENDER_START = 20;\\n\\n    modifier onlyRelayer() {\\n        require(_isRelayer(msg.sender), \\\"RelayerContextERC2771.onlyRelayer\\\");\\n        _;\\n    }\\n\\n    constructor(address _relayer) {\\n        relayer = _relayer;\\n    }\\n\\n    // DANGER! Only use with onlyRelayer or `_isRelayer` before transferring\\n    function _uncheckedTransferToFeeCollectorUncapped() internal {\\n        _getFeeTokenUnchecked().transfer(\\n            _getFeeCollectorUnchecked(),\\n            _getFeeUnchecked()\\n        );\\n    }\\n\\n    // DANGER! Only use with onlyRelayer or `_isRelayer` before transferring\\n    function _uncheckedTransferToFeeCollectorCapped(uint256 _maxFee)\\n        internal\\n        onlyRelayer\\n    {\\n        uint256 fee = _getFeeUnchecked();\\n        require(\\n            fee <= _maxFee,\\n            \\\"RelayerContextERC2771._uncheckedTransferToFeeCollectorCapped: maxFee\\\"\\n        );\\n        _getFeeTokenUnchecked().transfer(_getFeeCollectorUnchecked(), fee);\\n    }\\n\\n    // DANGER! Only use with onlyRelayer or `_isRelayer` before transferring\\n    function _uncheckedTransferFromSenderToFeeCollectorUncapped() internal {\\n        _getFeeTokenUnchecked().transferFrom(\\n            _msgSenderUnchecked(),\\n            _getFeeCollectorUnchecked(),\\n            _getFeeUnchecked()\\n        );\\n    }\\n\\n    // DANGER! Only use with onlyRelayer or `_isRelayer` before transferring\\n    function _unckeckedTransferFromSenderToFeeCollectorCapped(uint256 _maxFee)\\n        internal\\n    {\\n        uint256 fee = _getFeeUnchecked();\\n        require(\\n            fee <= _maxFee,\\n            \\\"RelayerContextERC2771._unckeckedTransferFromSenderToFeeCollectorCapped: maxFee\\\"\\n        );\\n        _getFeeTokenUnchecked().transferFrom(\\n            _msgSenderUnchecked(),\\n            _getFeeCollectorUnchecked(),\\n            fee\\n        );\\n    }\\n\\n    function _isRelayer(address _forwarder) internal view returns (bool) {\\n        return _forwarder == relayer;\\n    }\\n\\n    function _msgData() internal view returns (bytes calldata) {\\n        return\\n            _isRelayer(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    function _getFeeCollector() internal view onlyRelayer returns (address) {\\n        return\\n            abi.decode(\\n                msg.data[msg.data.length - _FEE_COLLECTOR_START:],\\n                (address)\\n            );\\n    }\\n\\n    function _getFeeToken() internal view onlyRelayer returns (address) {\\n        return\\n            abi.decode(\\n                msg.data[msg.data.length - _FEE_TOKEN_START:],\\n                (address)\\n            );\\n    }\\n\\n    function _getFee() internal view onlyRelayer returns (uint256) {\\n        return abi.decode(msg.data[msg.data.length - _FEE_START:], (uint256));\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return\\n            _isRelayer(msg.sender)\\n                ? abi.decode(\\n                    msg.data[msg.data.length - _SENDER_START:],\\n                    (address)\\n                )\\n                : msg.sender;\\n    }\\n\\n    function _getFeeCollectorUnchecked() internal pure returns (address) {\\n        return\\n            abi.decode(\\n                msg.data[msg.data.length - _FEE_COLLECTOR_START:],\\n                (address)\\n            );\\n    }\\n\\n    function _getFeeTokenUnchecked() internal pure returns (address) {\\n        return\\n            abi.decode(\\n                msg.data[msg.data.length - _FEE_TOKEN_START:],\\n                (address)\\n            );\\n    }\\n\\n    function _getFeeUnchecked() internal pure returns (uint256) {\\n        return abi.decode(msg.data[msg.data.length - _FEE_START:], (uint256));\\n    }\\n\\n    function _msgSenderUnchecked() internal pure returns (address) {\\n        return\\n            abi.decode(msg.data[msg.data.length - _SENDER_START:], (address));\\n    }\\n}\\n\",\"keccak256\":\"0x17f67a383dbdcfdca1def054847a79e2cc4146b9ef18e8bd8fa882be21fa7d96\",\"license\":\"MIT\"},\"@gelatonetwork/relayer-context/contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xf58ba7702aa3e8aebf160c14db02a66afcc28d7dd0b94dee6a30cc7c5fa8335a\",\"license\":\"MIT\"},\"@gelatonetwork/relayer-context/contracts/lib/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n    using SafeERC20 for IERC20;\\n\\n    modifier onlyERC20(address _token) {\\n        require(_token != NATIVE_TOKEN, \\\"TokenUtils.onlyERC20\\\");\\n        _;\\n    }\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal onlyERC20(_token) {\\n        if (_amount == 0) return;\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0x4507d23bf0b68cb763aec3e483d677fe59cd963de90f3a27958ceb960e0157df\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/Counter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {\\n    RelayerContextERC2771\\n} from \\\"@gelatonetwork/relayer-context/contracts/RelayerContextERC2771.sol\\\";\\n\\ncontract Counter is RelayerContextERC2771 {\\n    uint256 public counter;\\n    mapping(address => uint256) public contextCounter;\\n\\n    event IncrementCounter();\\n    event IncrementContextCounter(address _msgSender);\\n\\n    //solhint-disable-next-line no-empty-blocks\\n    constructor(address relayer) RelayerContextERC2771(relayer) {}\\n\\n    function increment() external onlyRelayer {\\n        // payment\\n        _uncheckedTransferToFeeCollectorUncapped();\\n\\n        // logic\\n        counter += 1;\\n        emit IncrementCounter();\\n    }\\n\\n    function incrementContext() external onlyRelayer {\\n        address _msgSender = _msgSender();\\n\\n        // logic\\n        contextCounter[_msgSender] += 1;\\n        emit IncrementContextCounter(_msgSender);\\n    }\\n\\n    function currentCounter() external view returns (uint256) {\\n        return counter;\\n    }\\n\\n    function currentContextCounter(address _msgSender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return contextCounter[_msgSender];\\n    }\\n}\\n\",\"keccak256\":\"0xaba1082dc8a92ee155063eb0116097228b372e2be92bdfce857dd1c43fa5bafa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610c99380380610c9983398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610bf96100a0600039600081816101010152818161015c01528181610270015261041d0152610bf96000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806382b761681161005b57806382b76168146100dc5780638406c079146100fc578063d09de08a14610148578063f69c0ac11461015257600080fd5b80631153ca25146100825780635763440b146100cb57806361bc221a146100d3575b600080fd5b6100b8610090366004610a55565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6000546100b8565b6100b860005481565b6100b86100ea366004610a55565b60016020526000908152604090205481565b6101237f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c2565b61015061015a565b005b61015061026e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f52656c61796572436f6e74657874455243323737312e6f6e6c7952656c61796560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61022c6103df565b600160008082825461023e9190610aa1565b90915550506040517f0ffca1dde64f1b803c88b9de47f8a44a693a20f2bd177e5f2592cffb738bd7d990600090a1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f52656c61796572436f6e74657874455243323737312e6f6e6c7952656c61796560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161021b565b600061033d610419565b905060018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461038e9190610aa1565b909155505060405173ffffffffffffffffffffffffffffffffffffffff821681527fea2bfe80062c6394f8f8d5804cafdf4b2ff1c2b5feefccbb11233dc843632d0a9060200160405180910390a150565b6104176103ea610488565b6103f2610497565b6103fa6104be565b73ffffffffffffffffffffffffffffffffffffffff1691906104cd565b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461045d57503390565b60003661046b601482610aba565b610476928290610acd565b8101906104839190610a55565b905090565b6000803661046b607482610aba565b600080366104a6603482610aba565b6104b1928290610acd565b8101906104839190610af7565b6000803661046b605482610aba565b806000036104da57505050565b73ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146105315761052c73ffffffffffffffffffffffffffffffffffffffff8416838361053b565b505050565b61052c82826105c8565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261052c908490610722565b80471015610632576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161021b565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461068c576040519150601f19603f3d011682016040523d82523d6000602084013e610691565b606091505b505090508061052c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161021b565b6000610784826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661082e9092919063ffffffff16565b80519091501561052c57808060200190518101906107a29190610b10565b61052c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161021b565b606061083d8484600085610847565b90505b9392505050565b6060824710156108d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161021b565b73ffffffffffffffffffffffffffffffffffffffff85163b610957576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161021b565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516109809190610b56565b60006040518083038185875af1925050503d80600081146109bd576040519150601f19603f3d011682016040523d82523d6000602084013e6109c2565b606091505b50915091506109d28282866109dd565b979650505050505050565b606083156109ec575081610840565b8251156109fc5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021b9190610b72565b73ffffffffffffffffffffffffffffffffffffffff81168114610a5257600080fd5b50565b600060208284031215610a6757600080fd5b813561084081610a30565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610ab457610ab4610a72565b92915050565b81810381811115610ab457610ab4610a72565b60008085851115610add57600080fd5b83861115610aea57600080fd5b5050820193919092039150565b600060208284031215610b0957600080fd5b5035919050565b600060208284031215610b2257600080fd5b8151801515811461084057600080fd5b60005b83811015610b4d578181015183820152602001610b35565b50506000910152565b60008251610b68818460208701610b32565b9190910192915050565b6020815260008251806020840152610b91816040850160208701610b32565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220f1994a42e15b67e70cf6f6755a85736ef005b8a5ddfe9473c7f6c8103bb124ea64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806382b761681161005b57806382b76168146100dc5780638406c079146100fc578063d09de08a14610148578063f69c0ac11461015257600080fd5b80631153ca25146100825780635763440b146100cb57806361bc221a146100d3575b600080fd5b6100b8610090366004610a55565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6000546100b8565b6100b860005481565b6100b86100ea366004610a55565b60016020526000908152604090205481565b6101237f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c2565b61015061015a565b005b61015061026e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f52656c61796572436f6e74657874455243323737312e6f6e6c7952656c61796560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61022c6103df565b600160008082825461023e9190610aa1565b90915550506040517f0ffca1dde64f1b803c88b9de47f8a44a693a20f2bd177e5f2592cffb738bd7d990600090a1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f52656c61796572436f6e74657874455243323737312e6f6e6c7952656c61796560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161021b565b600061033d610419565b905060018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461038e9190610aa1565b909155505060405173ffffffffffffffffffffffffffffffffffffffff821681527fea2bfe80062c6394f8f8d5804cafdf4b2ff1c2b5feefccbb11233dc843632d0a9060200160405180910390a150565b6104176103ea610488565b6103f2610497565b6103fa6104be565b73ffffffffffffffffffffffffffffffffffffffff1691906104cd565b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461045d57503390565b60003661046b601482610aba565b610476928290610acd565b8101906104839190610a55565b905090565b6000803661046b607482610aba565b600080366104a6603482610aba565b6104b1928290610acd565b8101906104839190610af7565b6000803661046b605482610aba565b806000036104da57505050565b73ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146105315761052c73ffffffffffffffffffffffffffffffffffffffff8416838361053b565b505050565b61052c82826105c8565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261052c908490610722565b80471015610632576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161021b565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461068c576040519150601f19603f3d011682016040523d82523d6000602084013e610691565b606091505b505090508061052c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161021b565b6000610784826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661082e9092919063ffffffff16565b80519091501561052c57808060200190518101906107a29190610b10565b61052c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161021b565b606061083d8484600085610847565b90505b9392505050565b6060824710156108d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161021b565b73ffffffffffffffffffffffffffffffffffffffff85163b610957576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161021b565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516109809190610b56565b60006040518083038185875af1925050503d80600081146109bd576040519150601f19603f3d011682016040523d82523d6000602084013e6109c2565b606091505b50915091506109d28282866109dd565b979650505050505050565b606083156109ec575081610840565b8251156109fc5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021b9190610b72565b73ffffffffffffffffffffffffffffffffffffffff81168114610a5257600080fd5b50565b600060208284031215610a6757600080fd5b813561084081610a30565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610ab457610ab4610a72565b92915050565b81810381811115610ab457610ab4610a72565b60008085851115610add57600080fd5b83861115610aea57600080fd5b5050820193919092039150565b600060208284031215610b0957600080fd5b5035919050565b600060208284031215610b2257600080fd5b8151801515811461084057600080fd5b60005b83811015610b4d578181015183820152602001610b35565b50506000910152565b60008251610b68818460208701610b32565b9190910192915050565b6020815260008251806020840152610b91816040850160208701610b32565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220f1994a42e15b67e70cf6f6755a85736ef005b8a5ddfe9473c7f6c8103bb124ea64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1172,
        "contract": "contracts/Counter.sol:Counter",
        "label": "counter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1176,
        "contract": "contracts/Counter.sol:Counter",
        "label": "contextCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}